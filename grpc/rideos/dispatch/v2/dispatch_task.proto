/***********************************************************************************************************************
 *
 * Copyright 2018-2019 rideOS, Inc.
 * rideOS confidential materials
 *
***********************************************************************************************************************/

syntax = "proto3";

package rideos.dispatch.v2;
option java_package = "ai.rideos.api.dispatch.v2";
option objc_class_prefix = "Dispatch";

import "google/protobuf/duration.proto";
import "rideos/dispatch/v2/common.proto";

message PassengerTaskRequest {
    // Required. Note that any given passenger may only have one active PassengerTask at a time.
    string passenger_id = 1;
    TaskLocation pickup_location = 2;
    TaskLocation dropoff_location = 3;
    // Required. Must be at least 1.
    int32 num_passengers = 4;
    // This task will only be assigned to vehicles with a matching fleet_id. If the fleet_id is not specified, the task
    // will only be assigned to vehicles with a blank fleet_id.
    string fleet_id = 5;
    // How long to wait for a dispatch before timing out this task. If left unset, a default value will be selected.
    // Set to zero or a negative duration to disable the timeout.
    google.protobuf.Duration dispatch_timeout = 6;
    VehicleFilter vehicle_filter = 7;
}

message RequestPassengerTaskResponse {
    string requested_task_id = 1;
}

message PassengerTaskInfo {
    string task_id = 1;
    TaskStage stage = 2;
    string assigned_vehicle_id = 3; // empty if not yet assigned

    TaskLocation pickup_location = 4;
    TaskLocation dropoff_location = 5;

    // Empty if task not yet assigned. May be empty if the vehicle has no driver contact info.
    ContactInfo driver_contact_info = 6;
    // Empty if task not yet assigned. May be empty if Dispatch does not have any info for the vehicle.
    VehicleInfo vehicle_info = 7;

    string fleet_id = 8;

    // Empty if the task is not cancelled
    CancelReason cancel_reason = 9;
    string replacement_task_id = 10;
}

message QueryCurrentTaskRequest {
    string passenger_id = 1;
}

message QueryTaskRequest {
    string task_id = 1;
}

message CancelTaskRequest {
    string requestor_id = 1;
    string requested_task_id = 2;
}

message UpdatePickupDropoffTaskRequest {
    string task_id = 1;

    // Can update pickup, dropoff, or both
    TaskLocation new_pickup_location = 4;
    TaskLocation new_dropoff_location = 5;
}

message CancelTaskResponse {
}

message UpdatePickupDropoffTaskResponse {
    string new_task_id = 1;
}

service DispatchTaskService {
    rpc RequestPassengerTask (PassengerTaskRequest) returns (RequestPassengerTaskResponse);
    rpc CancelTask (CancelTaskRequest) returns (CancelTaskResponse);
    rpc UpdatePickupDropoffTask (UpdatePickupDropoffTaskRequest) returns (UpdatePickupDropoffTaskResponse);

    rpc QueryCurrentTask (QueryCurrentTaskRequest) returns (PassengerTaskInfo);
    rpc QueryTask (QueryTaskRequest) returns (PassengerTaskInfo);
}
