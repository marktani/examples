/***********************************************************************************************************************
 *
 * Copyright 2018-2019 rideOS, Inc.
 * rideOS confidential materials
 *
***********************************************************************************************************************/

syntax = "proto3";

package rideos.ride_hail.v1beta;
option java_package = "ai.rideos.api.ride_hail.v1beta";
option objc_class_prefix = "RideHail";

import "rideos/dispatch/v2/common.proto";
import "rideos/dispatch/v2/dispatch_task.proto";
import "rideos/geo/v1/geo.proto";
import "rideos/route/v1/route.proto";

message GetPassengerStateRequest {
    string passenger_id = 1;

    // Response will report the status of all of these task IDs
    repeated string existing_task_id = 2;
}

message GetPassengerStateResponse {
    dispatch.v2.PassengerTaskInfo current_task_info = 1;

    geo.v1.PositionAndHeading assigned_vehicle_pose = 2;

    // The partial plan and route include the waypoints that must be completed before and up to the requestor's
    // next step
    dispatch.v2.Plan assigned_vehicle_partial_plan = 3;
    route.v1.RouteResponse assigned_vehicle_partial_route = 4;

    map<string, dispatch.v2.PassengerTaskInfo> existing_task_state = 5;
}

message SyncVehicleStateRequest {
    string vehicle_id = 1;
    geo.v1.PositionAndHeading vehicle_pose = 2;

    // Response will report the status of all of these task IDs
    repeated string existing_task_id = 3;

    // Optional. Set to true to request that the route be recalculated immediately.
    bool refresh_route = 4;
}

message SyncVehicleStateResponse {
    dispatch.v2.Plan plan = 1;
    route.v1.RouteResponse route_to_first_waypoint = 2;
    map<string, dispatch.v2.TaskStage> existing_task_stage = 3;
}

message SetVehicleRouteRequest {
    string vehicle_id = 1;
    string step_id = 2;
    rideos.route.v1.RouteResponse route_response = 3;
}

message SetVehicleRouteResponse {
}

service RideHailService {
    rpc GetPassengerState (GetPassengerStateRequest) returns (GetPassengerStateResponse);
    rpc SyncVehicleState (SyncVehicleStateRequest) returns (SyncVehicleStateResponse);
    rpc SetVehicleRoute (SetVehicleRouteRequest) returns (SetVehicleRouteResponse);
}
